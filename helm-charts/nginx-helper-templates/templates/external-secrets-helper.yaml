{{/*
Helper to merge all external secrets configurations from different levels
Usage: {{ include "helpers.getAllExternalSecrets" . }}
*/}}
{{- define "helpers.getAllExternalSecrets" -}}
{{- $allSecrets := list -}}

{{/* Merge from predefined levels */}}
{{- range $level := (list "base" "env1" "env2" "env3" "override" "custom") -}}
  {{- if hasKey $.Values.secrets "secretManagement" -}}
    {{- if hasKey $.Values.secrets.secretManagement $level -}}
      {{- $levelConfig := index $.Values.secrets.secretManagement $level -}}
      {{- $allSecrets = append $allSecrets $levelConfig -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{/* Also handle direct externalSecretsOperator array for backward compatibility */}}
{{- if hasKey $.Values.secrets "secretManagement" -}}
  {{- if hasKey $.Values.secrets.secretManagement "externalSecretsOperator" -}}
    {{- range $.Values.secrets.secretManagement.externalSecretsOperator -}}
      {{- $allSecrets = append $allSecrets . -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- $allSecrets | toYaml -}}
{{- end -}}

{{/*
Generate External Secret resources from merged configurations
Usage: {{ include "helpers.renderExternalSecrets" . }}
*/}}
{{- define "helpers.renderExternalSecrets" -}}
{{- $allConfigs := include "helpers.getAllExternalSecrets" . | fromYaml -}}
{{- range $index, $config := $allConfigs -}}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $.Release.Name }}-external-secret-{{ $index }}
  namespace: {{ $.Values.namespace | default "default" }}
spec:
  secretStoreRef:
    name: {{ $config.secretStore.name }}
    kind: {{ $config.secretStore.kind }}
  target:
    name: {{ $.Release.Name }}-secret-{{ $index }}
  data:
  {{- range $key, $value := $config.remoteKeys }}
  - secretKey: {{ $key }}
    remoteRef:
      key: {{ $value.name }}
      {{- if $value.property }}
      property: {{ $value.property }}
      {{- end }}
  {{- end }}
{{- end -}}
{{- end -}}
