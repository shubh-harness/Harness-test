apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "todo.fullname" . }}-cleanup
  labels:
    {{- include "todo.labels" . | nindent 4 }}
    app.kubernetes.io/component: cronjob
    harness.io/managed-workload: "true"
  {{- if .Values.namespace.name }}
  namespace: {{ .Values.namespace.name }}
  {{- end }}
spec:
  # Run every 5 seconds (note: standard Kubernetes doesn't support seconds in cron expressions)
  # For standard Kubernetes use "*/1 * * * *" for every minute
  schedule: "*/1 * * * *"
  concurrencyPolicy: {{ .Values.cronjob.concurrencyPolicy }}
  successfulJobsHistoryLimit: {{ .Values.cronjob.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.cronjob.failedJobsHistoryLimit }}
  suspend: {{ .Values.cronjob.suspend }}
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.cronjob.backoffLimit }}
      template:
        metadata:
          labels:
            {{- include "todo.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: cronjob
            harness.io/managed-workload: "true"
        spec:
          restartPolicy: OnFailure
          containers:
            - name: {{ .Chart.Name }}-cleanup
              image: "{{ default .Values.image.repository .Values.cronjob.image.repository | default "busybox" }}:{{ default .Values.image.tag .Values.cronjob.image.tag | default "latest" }}"
              imagePullPolicy: {{ default .Values.image.pullPolicy .Values.cronjob.image.pullPolicy | default "IfNotPresent" }}
              command: 
                {{- toYaml .Values.cronjob.command | nindent 16 }}
              resources:
                {{- toYaml .Values.cronjob.resources | nindent 16 }}
